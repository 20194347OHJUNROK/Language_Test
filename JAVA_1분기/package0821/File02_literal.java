package package0821;


public class File02_literal {

// 리터럴(Literal)
//  - 프로그램에서 연산/입력된 값이 아니라 코드 상으로 직접 입력된 값
//  - 데이터의 타입에 따라 여러 리터럴이 있다.
	
// 정수 리터럴
//  - 10진수, 2진수, 8진수, 16진수 리터럴이 있다.
//		10 진수 : 0 ~ 9 로 한 자리를 표현하는 진법
//		2 진수  : 0과 1 로 한 자리를 표현하는 진법
//      8 진수  : 0 ~ 7 로 한 자리를 표현하는 진법
//		16 진수 : 0 ~ 9, A ~ F 로 한 자리를 표현하는 진법
//  - 정수 리터럴은 int 형으로 컴파일되므로 -21억 ~ 21억까지만 작성
//    long 으로 변환을 해주기 위해선 리터럴 뒤에 L, l 을 작성
	int red = 245;	
	int green = 131;
	int blue = 95;
	// 16진수 리터럴(Hexa decimal)
	int color = 0xf5835f;
	// 8진수 리터럴(Octal)
	int octal = 0377;
	// 2진수 리터럴(Binary)
	int binary = 0b1101110;
	
	long num = 2200000000L; // 22억은 int형으로 표현할 수 없는 값이기 때문에 long타입으로 변환
//=========================================================================================================	
	
// 실수 리터럴
//  실수 리터럴은 double 형으로 컴파일이며, float 타입의 리터럴을 사용할 경우에는
//	리터럴 뒤에 F, f 를 작성
	double pi = 3.1415;
	float f1 = 3.14f;
//===========================================================================================================
	
// 문자 리터럴
//	- 작은 따옴표로 하나의 문자를 표현
//  - 아스키 코드 = 미국 ANSI에서 표준화된 정보 교환용 7비트 부호체계
//			  = 정수 형태로 표현
	
//    유니코드    = 세계 대부분의 문자를 표현하기 위한 2byte 부호체계
//			   = '\u0000' 와 함께 16진수 4자리로 표현
	
//  - 이스케이프 문자(escape character)
//		문자로 표현할 수 없는 문자들을 표현하기 위한 확장 문자
//		종류
//			- \n : 개행 문자(new line)
//			- \t : 탭 문자(tab)
//			- \' : 작은 따옴표
//			- \" : 큰 따옴표
//			- \\ : 백슬래스 또는 원화
//=================================================================================================================
	
// 논리 리터럴
//  - 논리 리터럴은 true 와 false 뿐이다.
			
// 문자열 리터럴
//  - 다수의 문자를 큰 따옴표("")로 묶어서 표현
//  - 문자열 리터럴은 String 클래스의 객체로 처리
	
// null 리터럴
//  - 참조 타입의 기본 값으로 사용되는 리터럴
//  - '아무것도 참조하고 있지 않다.' 를 의미
			
// JDK 7 부터 허용된 리터럴 표기법
//  - 숫자 리터럴에 '_'를 허용
//    컴파일러가 컴파일 할 때 '_'를 빼고 컴파일 한다.
//  - 단, 허용되지 않는 경우
//		- 리터럴 끝에는 사용할 수 없다.
//		- 소수점(.) 앞, 뒤에 사용할 수 없다.
//      - F, L 앞에 사용할 수 없다. _F, _L X
		int money = 1_000_000;	
//		- 진수 표기하는 문자 사이에 사용할 수 없다.
//======================================================================================================================
	
	
	public static void main(String[] args) {
		char c1 = 'A';
		System.out.println("c1 = " + c1);
		
		char c2 = 65; // 'A' 의 아스키 코드 = 65, 'a' = 97
		System.out.println("c2 = " + c2); 
		
		char c3 = '\uAC00'; // '가' 의 유니코드 
		
		System.out.println("c3 = " + c3);
		
		System.out.println("Hello World! \nHello Java!");
		
		String Msg="Hello JAVA!";
		System.out.println(Msg == "Hello JAVA!");  //true
		System.out.println(Msg.equals("Hello JAVA!"));	//true
		// 문자열을 비교할때는 등가 비교연산자(==)를 사용하지 않는다.
		// String의 문자열 클래스 안에있는 메서드(기능)인 equals()를 사용하며 문자열을 대소구분한다.
		//	→ 문자열.equals("비교할 문자열")
	}	
//=========================================================================================================================
	
	// 상수(constant) : 변하지 않는 수
	// 변수 앞에 final키워드를 사용하여 변수를 초기화
	//- 초기화 이후 해당값을 변경할수없다.
	//- 프로그램이 끝날때까지 값이 바뀌어선 안된다
	//- 상수의 식별자는 모든 문자를 대문자로 작성하며
	//	두 단어 이상인 경우에는 단어 사이에 '_'를 이용하여 작성
	final double PI = 3.141592;
	
	// PI=3.14;	ERROR!
	
	// YES 를 표현하는 데이터: 1
	final int YES = 1;
	// NO 를 표현하는 데이터: 0
	final int NO = 0;
	// CANCEL 를 표현하는 데이터 : -1
	final int CANCEL = -1;
	// SEND 를 표현하는 데이터: 1
	final int SEND = 1;
	// RECV 를 표현하는 데이터: 0
	final int RECV = 0;
	
}
