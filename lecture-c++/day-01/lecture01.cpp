#include<iostream>

// C 프로그램에서는 표준라이브러리의 헤더 파일을 포함할때 파일 확장자(*h)를 붙이지만
// C++ 프로그램에서는 표준 라이브러리의 헤더 파일을 포함할때 파일 확장자(*h)를 붙이지 않는다.
//  C++ 프로그램에서는 C 표준 라이브러리의 헤더 파일을 포함할때는 앞에 접두사를 붙이지않는다.

// C언어		 → #include<stdio.h>
// C++언어 → #include<cstdio>


// 문자열의 최대 길이를 나타내는 메크로 상수
// #define LENGTH 80
// C 프로그램에서는 상수(constant) 보다는 메크로 상수(macro constant)를 주로 사용하지만,
// C++ 프로그램에서는 메크로 상수보다는 상수를 주로 사용한다.

int main()
{
	// std 이름공간( standard namespace)
	// → 식별자의 충돌을 막기 위해 C++ 표준 라이브러리에서 제공하는 요소들은 std 이름공간
	//		안에 선언되어있다.


	// cout 객체(object)
	// → 표준 출력(standard output; stdout)을 나타내는. std :: ostream 클래스의 객체
	// → #include <iostream> 선언시 사용가능
	//  → cout 객체와 스트림 삽입 연산자(stream insertion operator; <<) 를 이용해
	//		표준 출력에 지정한 값을 출력
	
	// → cout 객체와 스트림 삽인 션산자를 이용해 여러값을 연이어 출력할수있으며
	//		이때 출력하고자 하는 값은 스트림 삽입연산자의 두번째 피연산자가 되어야한다.
	// → cout 객체를 이용해 출력할때, 출력하는 값의 형태는 값의 자료형에 따라 결정된다.

	// endl 명령어
	// → 개행 문자를('\n')를 출력하는 것과 같은 처리를 하며, 출력 버퍼를 비우는 기능을 포함하고있다.

	std::cout << "Hello World!" << std::endl;
	//------------------------------------------------------------------------------------------------------------

	int num = 10;

	//	출력
	std::cout << "num = "<<num << std::endl;
//----------------------------------------------------------------------------------------------------------------

	// using 명령어을 이용해 cin, cout, endl 식별자를 std 이름공간에서 찾도록 설정

	using std::cin;
	using std::cout;
	using std::endl;

	// using 명령어를 작성한 이후
	cout << "num = " << num << endl;

	//-----------------------------------------------------------------------------------------------------------------

	// 표준 입력(standard input; stdin)을 통해 사용자에게 값을 입력

	// C 프로그램 경우
	// #include<stdio.h>
	// scanf("%d", &num);

	// C++ 프로그램 경우
	// → 표준 입력(standard input; stdin)을 나타내는, std::istream 클래스의 객체
	// → #include<iostream> 선언시 사용가능
	// → cin 객체와 스트림 추출 연산자(stream extraction operator; >>)를 이용해
	//		표준 입력에서 값을 읽어와 지정한 변수에 대입한다.
	
	// → 스트림 추출 연산자의 두번째 피연산자로 지정한 변수의 자료형에 따라
	//		어떤 형식의 값을 읽어올지 결정된다.
	
	// 사용자 입력
	cout << "Enter an  integer >>> ";
	cin >> num;

	// 출력
	cout << "num = " << num << endl;

	//--------------------------------------------------------------------------------------------------------------------

	// cin 객체를 이용해, 표준입력에서 2개이상의 정수를 읽어오는 경우

	int n1, n2;

	// 사용자 입력
	cout << "Enter two integers >>> ";
	cin >> n1 >> n2;
	// → 표준 입력을 통해 입력을 받을 때는 공백 문자(white space) 즉 구분자로 구분된다.

	// 출력
	cout << "n1 = " << n1 << ", n2 = " << n2 << endl << endl;


	//------------------------------------------------------------------------------------------------------------------------

	// cin 객체를 이용해 표준 입력에서 문자열을 입력

	// 문자열을 저장하기 위해 배열 선언
	const int LENGTH = 80;
	char str[LENGTH + 1] = { 0, };

	// 사용자 입력
	cout << "Enter a string :";
	//	cin >> str;
	// → cin 객체와 스트림 추출 연산자를 이용해, 빈칸을 포함하는 문자열을 읽어올수없다!
	
	// scanf("%s", str);
	// → scanf("%[^\n]s", str);
	
	// → cin 객체를 이용해, 빈칸을 포함하는 문자열을 읽어오기 위해 getline 함수를 사용한다.
	//  getline 함수는 입력스트림에서 개행 문자('\n')까지의 값을 문자열로 읽어온다.
	// * @param buffer 문자열을 저장할 배열
	// * @param length 입력 스트림에서 읽어올 문자열의 최대 길이

	//	위에서 cin 객체와 스트림 추출 연산자를 이용해 정수 2개를 읽어오면, 입력 스트림에는
	//  개행 문자('\n')가 그대로 남아 있게된다. 따라서 아래에서 cin 객체의 getline 함수로 문자열을 읽어오려고 시도하면
	//  아무런 값도 읽어올수가 없다. 그래서 getline 함수로 문자열을 읽어오기 전에 입력 스트림에 남아있는 내용을 모두 제거하는 것이 좋다!!
 
	// cin 객체의 ignore 함수를 이용해, 입력 스트림에 남아있는 값들을 제거
	cin.ignore();
	// → ignore 함수의 첫번째 인자로 제거할 문자의 최대 개수를 지정할수 있다.
	//		첫번째 인자를 생략하면, 문자 하나를 제거한다.
	//		cin.ignore(100);

	cin.getline(str, LENGTH);
	
	// 출력
	cout << "str = \"" << str << "\"" << endl << endl;
	// printf("str = \"%s\"\n\n", str);


	return 0;


}