#include<iostream>

using std::cin;
using std::cout;
using std::endl;

class Sample 
{
// 멤버 변수
private:
	int data;

// 멤버 함수
public:
	/*

		*	생성자(constructor)와 소멸자(destructor)
		
		 → 생성자와 소멸자는 객체가 생성될 때 또는 소멸될 때 컴파일러에 의해 자동으로 호출된다.

		 → 객체가 생설될 때, 또는 객체가 소멸될 때, 생성자 또는 소멸자는 반드시 호출되어야한다.
			만약! 호출할 수없으면 객체는 생성 또는 소멸 되지 않는다.
		    따라서 생성자와 소멸자는 특별한 경우가 아니면, public 멤버로 선언해야 한다.

		→ 생성자와 소멸자의 식별자는 클래스의 식별자와 같아야 한다.

		→ 생성자와 소멸자는 반환 값이 없는 함수이다. 따라서 반환 값의 자료형을 지정하지 않는다.

		→ 클래스에서 생성자와 소멸자가 정의되어 있지않으면, 컴파일러가 자동으로 기본 생성자와 기본 소멸자를 추가한다.

		* 생성자(constructor)
		:	객체가 생성될 때 호출되는 멤버 함수
			객체가 생설될 때 생성자가 반드시 호출되어야 하며, 생성자가 호출되지않으면 객체가 생성되지 않는다.
			생성자는 객체가 생성될 때 객체가 동작할 수 있도록 준비하는 역할을 수행한다.
			그 중에서 가장 중요한 것은 멤버 변수를 초기화하는 것이다!
			→ 객체를 생성하면서 초기화하기 위해 지정한 값은 생성자의 매개변수에 전달된다.
			→ 이렇게 생성자의 매개변수에 전달된 값은 생성자의 멤버 초기화 리스트를 통해
				초기화한다.

		* 기본 생성자(default constructor)
		→ 클래스에 생성자가 정의되어 있지 않으면, 컴파일러가 기본 생성자를 추가한다.
			ex) Sample(){}  추가


		* 소멸자(desturctor)
		:	객체가 소멸될 때 호출되는 멤버 함수
			객체가 소멸될 때 소멸자가 반드시 호출되어야 하며, 소멸자가 호출되지않으면 객체가 소멸되지 않는다.
			소멸자는 객체가 소멸될 때 정리하는 역할을 수행한다.
			주로 소멸자에서는 객체에서 사용했던 시스템 자원을 해제하는 역할을 수행한다.
			→ 소멸자는 매개변수를 지정할 수 없다.
			→ 따라서 소멸자는 함수 오버로딩을 할수 없다!

		* 기본 소멸자(default destructor)
		→ 클래스에 소멸자가 정의되어 있지 않으면, 컴파일러가 기본 소멸자를 추가한다.
			ex) ~Sample(){}	추가


	Sample(int n)
	{
		// 아래의 문장은 초기화가 아니라 대입이다!
		// 변수는 선언과 동시에 초기화하는것이 좋다.
		data = n;
	}

	*/


	/*
	* 생성자의 멤버 초기화 리스트(member initialization	list)
		: 생성자의 매개변수 목록 다음에 멤버 변수들의 초기화 표현식을 쉽표로 구분해서 나열
		→ 생성자의 매개변수에 전달된 값을 이용해 멤버 변수를 초기화한다.
	*/

	// 생성자(constructor)
	Sample(int n) : data(n)
	{
		cout << "Sample :: Sample(int)" << endl;
	}

	// 소멸자(destructor)
	~Sample()
	{
		cout << "Sample :: ~Sample() - " << data << endl;
	}
	/*
		* 객체를 생성할때 초기화할 값을 지정하지 않는 경우도 있다.
			따라서 생성자를 정의한 경우에는 이런 상황에 대처할 수 있도록 생성자를 추가한다.
			
			1. 함수 오버로딩(function overloading)
			2. 매개변수의 기본 값(default parameter)

		*	1. 생성자의 함수 오버로딩
		→ 위에서 정의한 Sample(int) 생성자는 객체를 생성하면서 int 자료형 값으로
			초기화하는 경우 호출되고, 아래 Sample() 생성자는 초기화하는 값을 지정하지
			않는 경우에 호출된다.
	*/

	Sample() :data(0)
	{
		cout << "Sample :: Sample()" << endl;
	}
	
	//	*	2. 생성자의 매개변수의 기본 값
	//		Sample(int n = 0) : data(n){}


	// 설정자(setter)
	void SetData(int n)
	{
		data = n;
	}


	// 접근자(getter)
	inline int GetData()
	{
		return data;
	}

	// 출력하는 기능
	/*void Print()
	{
		cout << "data = " << data << endl;
	}
	*/


	/*
		* 일반적으로 멤버 함수는 클래스 내부에 선언부만 작성하고, 멤버 함수의 정의부는
			클래스 외부에 작성한다.
		* 다만, 멤버 함수가 inline 함수인 경우에는, 클래스 내부에서 정의해야 한다.
		* 대부분 컴파일러는 클래스 내부에서 멤버 함수를 정의하면 inline 함수로 취급한다.		
	*/
	void Print();
};

/*
	* 클래스의 멤버 함수를 클래스 외부에서 정의
		→ 일반적으로 클래스 내부에 멤버 함수의 선언부를 작성하고, 클래스 외부에서 정의한다.
			여기에서 말하는 "클래스 외부"란 main 함수 아래나 다른 소스 파일을 이야기한다.
			
		→ 이때, 클래스의 식별자와 범위 지정 연산자( : : )를 이용해 어떤 클래스의
			멤버 함수인지를 명시한다.
*/

void Sample::Print()
{
	cout << "data = " << data << endl;
}

int main()
{
	/*
		* 변수의 선언과 초기화
			int num = 10;			→ C version
			int num(10);				// → C++ version

		* 변수의 대입
			num = 20;
	*/

	/* 
		* 객체의 생성과 초기화
			Sample obj1 = 10;		→ C version
			Sample obj1(10);		→ C++ version
			Sample obj1;				→ Sample(); 기본 생성자를 호출
	*/

	Sample obj1(10);		// Sample(int); 생성자를 호출
	// → 객체를 생성하면서 멤버 변수를 초기화할 값을 전달한다.
	//		이러한 값들은 생성자의 매개변수에 전달된다.

	/*
		*	객체가 생성되는 과정
		1 . 객체에, 즉 객체의 멤버 변수에 저장 공간이 할당
		2 . 생성자(constructor) 호출 (초기화하는 값은 생성자의 매개변수에 전달)
		2.1	생성자의 멤버 초기화 리스트에 명시된 초기화 표현식들이 실행
		2.2	생성자의 본체가 실행


		*	객체가 소멸되는 과정
		1. 소멸자(destructor) 호출
		2. 객체에 할당했던 저장 공간을 소멸
	*/
	
	obj1.SetData(20);
	obj1.Print();

	// Sample 클래스의 새로운 인스턴스 (instance ; 특정 자료형의 객체)를 생성
	Sample obj2;			// Sample(); 기본 생성자가 호출이 되어야 하는데...


	obj2.SetData(30);
	obj2.Print();

	return 0;
}