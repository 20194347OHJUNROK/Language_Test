#include<iostream>

/*
* 좌표 평면에서 점을 표현하는 구조체 point
*/
struct point
{
	// 멤버 변수(member Variable)
	int x;
	int y;
};

/*
*  좌표 평면의 점의 좌표를 출력하는 함수 (값에 의한 호출)
* @param x 출력할 점의 x축 좌표
* @param y 출력할 점의 y축 좌표
*/
void PrintPoint(int x, int y)
{
	std::cout << "pos = (" << x << ", " << y << ")" << std::endl;
}
//---------------------------------------------------------------------------------------------------------------------------------------

/*
*  좌표 평면의 점의 좌표를 출력하는 함수	 (값에 의한 호출)
* @param pos 출력할 point 구조체 변수

void PrintPoint(point pos)
{
	// 함수의 매개변수는 함수가 호출되면 선언되고, 인자로 초기화된다.
	// → point pos = p1;
	// → point pos = { p1.x, p1.y };		"멤버 대 멤버 복사"를 수행
	std::cout << "pos = (" << pos.x << ", " << pos.y << ")" << std::endl;
}
*/

//---------------------------------------------------------------------------------------------------------------------------------------

/*
* 좌표 평면의 점의 좌표를 출력하는 함수 (참조에 의한 호출)
* @param ref 출력할 point 구조체 변수의 참조자
*/

void PrintPoint(const point& ref)
{
	//  참조자를 이용한 참조에 의한 호출(call - by- reference)
	// → point& ref = p1;

	//		ref.x = 10;
	// 	→ p1.x = 10;
	
	// → 참조자나 포인터를 통해 함수 외부에서 선언된 변수에 접근할수 있으므로,
	//		함수 외부에서 선언된 변수의 값을 수정할수도 있다. 그래서 의도치않게 그값을 변경할수있으므로,
	//		참조자나 포인터를 통해 참조만 하는 경우에는 매개변수를 상수(constant)로 선언한다.
	std::cout << "pos = (" << ref.x << ", " << ref.y << ")" << std::endl;
	//	std::cout << "pos = (" << p1.x << ", " << p1.y << ")" << std::endl;

}

//----------------------------------------------------------------------------------------------------------------------------------------

int main()
{

	// 구조체 변수(structure Variable) 선언
	//	struct point pos;		→ C version
	point pos;						// C++ version

	// 멤버 접근 연산자(.)를 이용해 구조체 변수의 멤버 변수에 접근
	pos.x = 3;
	pos.y = 7;

	// 출력
	//cout << "pos = (" << pos.x << ", " << pos.y << ")" << endl;

	// PrintPoint 함수를 이용해 구조체 변수 pos의 좌표를 출력
	PrintPoint(pos.x, pos.y);

	// 구조체 변수를 선언하고, 구조체 변수로 초기화
	// → "멤버 대 멤버 복사" 를 수행
	point p1 = pos;
	// → point p1 = { pos.x, pos.y };

	// PrintPoint 함수를 이용해 구조체 변수 pos의 좌표를 출력
	PrintPoint(p1);
	// → 함수가 오버로딩 된 경우에는, 인자의 자료형과 개수에 따라 어던 함수를 호출할지 결정한다.
	// → 인자로 구조체 변수를 지정한 경우, 컴파일러는 void PrintPoint(point pos) 함수를 호출해야할지
	//		void PrintPoint(point& ref) 함수를 호출해야 할지 결정할수 없다.
	//		그래서 이 두개의 함수는 동시에 정의할수 없다!


		return 0;
}