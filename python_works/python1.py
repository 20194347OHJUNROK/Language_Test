#--------------------------------------------------------------------------
# => 컴퓨터 시스템의 기본적인 출력장치
# print 함수 : 표준출력에 지정한 값을 출력하고 개행

print('Hello world!')

#--------------------------------------------------------------------------
#변수(variable)정의

value = 10

#print 함수를 이용해 변수 value를 표준 출력에 출력
print(value)

#아래와 같이 출력하기 위해서는 아래와 같은 문자열을 만들어줘야한다.
#value = 10
#'value = 10'
# => 'value = ' +value
# print('value = '+value)  # error!


#문자열은 문자열하고만 더할수있다
# => 'value ' +str(value)
print('value = '+str(value))
# -> print('value = '+str(10))
# -> print('value =' + '10')
# -> print('value = 10')

#------------------------------------------------------------------------------

#format 매서드를 이용해 출력할 문자열을 생성
# 'value = {}'.format(value)
print('value = {}'.format(value))

#------------------------------------------------------------------------------
#print 함수에서 여러 값을 출력할 수 있다. 이때 각 값은 쉼표(,)로 구분한다.
#이때 각각의 값들은 빈칸(space)으로 구분되어 출력된다.
print('value =', value)

print('Hello','World!','Do your','best!')

#빈칸이 아닌 다른 값으로 각각의 값들을 구분하고자 할 때는 sep 인자로 구분자를 설정한다.
# 1, 2, 3
print(1, 2, 3)      #1 2 3 
print(1, 2, 3, sep=', ')    #1, 2, 3
print(1, 2, 3,sep=',')   #1,2,3

print(1920, 1080, sep='x')   #1920X1080

#--------------------------------------------------------------------------------
#print 함수는 지정한 값을 출력하고, 마지막에 개행 문자를 출력('\n')
print()         #'\n' 개행문자만 출력됨

print('value = ')   #'value = \n'출력
print(value)    #'10\n'

#만약 이를 다른 값으로 바꾸고자할 때는 end 인자로 설정한다.
#end 인자를 설정해서 마지막에 출력되는 개행 문자를 제거할 수있다.
#그래서 print 함수를 여러번 사용하더라도 한줄에 모든 값을 출력할수있다.
print('value = ',end='')   #'value = '출력
print(value)    #'10\n'
print()

#----------------------------------------------------------------------------------

#for 메서드를 이용해 형식화된 문자열(formatted string)을 생성하고,
#이 문자열을 print함수를 이용해서 출력

value = 10
pi = 3.141592

# value = 10 , pi = 3.141592

print('value = ',value,', pi = ',pi)      #value = 10 , pi = 3.141592

#'value = 10, pi = 3.141592'
#'value = {0}, pi = {1}' . format(value, pi)
# 이미 순서대로 지정이 되어있기때문에 생략가능
#'value = {}, pi = {}' . format(value, pi)
print('value = {}, pi = {}' . format(value, pi))

#'value = {}, pi = {}' . format(pi, value)      error!
#  순서를 지정
print(' value = {1}, pi = {0}'.format(pi, value))

#-----------------------------------------------------------------------------------

# 서식 지정자를 이용해 형식 문자열에 들어갈 값의 형태를 설정가능
# 서식 지정자 f : 부동 소수점 형태(floating point)로 설정

print('value = {}, pi = {:f}' .format(value, pi))

#서식 지정자를 이용해 형식 문자열을 생설할 때, 소수점 이하 몇째 자리까지
#값을 넣을 것인지 정확도를 지정할수있다.
# => 아래와 같이 정확도를 지정하면, 소수점 이하 넷째 자리에서 반올림해서 셋째 자리까지 출력가능
print('value = {}, pi = {:.3f}' .format(value, pi))

#서식 지정자를 이용해 출력할 값의 너비를 설정
# 서식지정자 d : 십진수 형태(decimal)로 정수의 값을 설정
print('|1234567890|')
print('|{}|'.format(value))
print('|{:d}|'.format(value))
print('|{:10d}|'.format(value))     #너비를 지정한 경우, 숫자는 오른쪽 정렬
print('|{:<10d}|'.format(value))     # 왼쪽 정렬
print('|{:^10d}|'.format(value))     # 가운데 정렬
print('|{:010d}|'.format(value))     #너비를 지정한 경우, 공백을 0으로 채움


